syntax = "proto3";

package types;

import weak "gogoproto/gogo.proto";

option (gogoproto.populate_all) = true;
option (gogoproto.testgen_all) = true;
option (gogoproto.gostring_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.verbose_equal_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

message Application {
    string id = 1 [(gogoproto.customname) = "ID"];
    string name = 2;
    Version version = 3;
    string clusterId = 4;
    string state = 5;
    int64 createdAt = 6;
    int64 updatedAt = 7;
}

message Version {
    string id = 1 [(gogoproto.customname) = "ID"];
    string perviousVersionID = 2;
    string command = 3;
    double cpus = 4;
    double mem = 5;
    double disk = 6;
    int32 instances = 7;
    string runAs = 8;
    Container container = 9;
    map<string,string> labels = 10;
    repeated HealthCheck healthChecks = 11;
    map<string,string> env = 12;
    KillPolicy killPolicy = 13;
    UpdatePolicy updatePolicy = 14;
    repeated string constraints = 15;
    repeated string uris = 16;
    repeated string ip = 17;
    string mode = 18;
}

message Container {
    string type = 1;
    Docker docker = 2;
    repeated Volume volumes = 3;
}

message Docker {
    bool forcePullImage = 1;
    string image = 2;
    string network = 3;
    repeated Parameter parameters = 4;
    repeated PortMapping portMappings = 5;
    bool privileged = 6;
}

message Parameter {
    string key = 1;
    string value = 2;
}

message PortMapping {
    int32 containerPort = 1;
    string name = 2;
    string protocol = 3;
}

message Volume {
    string containerPath = 1;
    string hostPath = 2;
    string mode = 3;
}

message KillPolicy {
    int64 duration = 1;
}

message UpdatePolicy {
    int32 updateDelay = 1;
    int32 maxRetries = 2;
    int32 maxFailovers = 3;
    string action = 4; 
}

message HealthCheck {
    string id = 1 [(gogoproto.customname) = "ID"];
    string address = 2;
    string protocol = 3;
    int32 port = 4;
    int32 portIndex = 5; 
    string portName = 6;
    Command command = 7;
    string path = 8;
    uint32 maxConsecutiveFailures = 9;
    double gracePeriodSeconds = 10;
    double intervalSeconds = 11;
    double timeoutSeconds = 12;
}

message Command {
    string value = 1;
}
